/*!
 * define-config-plugin v0.1.0
 * (c) 2020-2020 Russell
 * https://github.com/any86/any-touch
 * Released under the MIT License.
 */
import t from"webpack";import{join as e}from"path";import n from"fs";const o=(a="RegExp",t=>t&&Object.prototype.toString.call(t)===`[object ${a}]`);var a;const i=(t,a)=>{try{const i=o(t)?t:new RegExp(t);return n.readdirSync(a).filter(t=>i.test(t)).map(t=>e(a,t))}catch(t){console.log("读取文件失败:",a)}return[]},s=(t,e,o)=>{try{n.writeFileSync(t,e,o)}catch(e){console.log("读取文件失败:",t)}},r=t.DefinePlugin;module.exports=class{constructor(t){this.__PATH__=t.path||e(process.cwd(),"./config/"),this.__ENV__=t.env,this.__KEY__=t.key||"G_CONFIG"}apply(t){t.hooks.run.tapPromise("DefineConfigPlugin",async t=>{await this.init(t)})}async init(t){const{__KEY__:e}=this,n=await this.readConfigFile();console.log(n,"===data"),this.handleGenerateFiles(n),new r({[e]:JSON.stringify(n)}).apply(t)}handleGenerateFiles(t){const e=[{name:__dirname+"/config.ts",template:"export default {{json}}".replace(/\{\{json\}\}/g,JSON.stringify(t,null,2))},{name:__dirname+"/global.d.ts",template:"import config from './config'\ndeclare global {\n  const G_CONFIG: typeof config\n}\nexport {}"}];for(const{name:t,template:n}of e)s(t,n)}async readConfigFile(){const{__PATH__:t,__ENV__:e}=this,n={default:{regExp:"config.?(default).?(ts|js)",value:{}},[e]:{regExp:`config.?(${e}).?(ts|js)`,value:{}}};for(const e in n){const[o]=i(n[e].regExp,t);if(o){const t=await import(o)||{default:{}};n[e].value=t.default}}return Object.assign({},n.default.value,n[e].value)}};

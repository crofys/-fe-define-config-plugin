/*!
 * @crofys/define-config-plugin v1.0.0
 * (c) 2020-2020 Russell
 * https://github.com/any86/any-touch
 * Released under the MIT License.
 */
import t from"webpack";import n from"fs";function e(t){var n=function(t){return"/"===t.charAt(0)}(t),e="/"===o(t,-1);return(t=function(t,n){for(var e=0,r=t.length-1;r>=0;r--){var i=t[r];"."===i?t.splice(r,1):".."===i?(t.splice(r,1),e++):e&&(t.splice(r,1),e--)}if(n)for(;e--;e)t.unshift("..");return t}(i(t.split("/"),(function(t){return!!t})),!n).join("/"))||n||(t="."),t&&e&&(t+="/"),(n?"/":"")+t}function r(){var t=Array.prototype.slice.call(arguments,0);return e(i(t,(function(t,n){if("string"!=typeof t)throw new TypeError("Arguments to path.join must be strings");return t})).join("/"))}function i(t,n){if(t.filter)return t.filter(n);for(var e=[],r=0;r<t.length;r++)n(t[r],r,t)&&e.push(t[r]);return e}var o="b"==="ab".substr(-1)?function(t,n,e){return t.substr(n,e)}:function(t,n,e){return n<0&&(n=t.length+n),t.substr(n,e)};const s=(a="RegExp",t=>t&&Object.prototype.toString.call(t)===`[object ${a}]`);var a;const c=(t,e)=>{try{const i=s(t)?t:new RegExp(t);return n.readdirSync(e).filter(t=>i.test(t)).map(t=>r(e,t))}catch(t){console.log("读取文件失败:",e)}return[]},l=(t,e,r)=>{try{n.writeFileSync(t,e,r)}catch(n){console.log("读取文件失败:",t)}},f=t.DefinePlugin;module.exports=class{constructor(t){this.__PATH__=t.path||r(process.cwd(),"./config/"),this.__ENV__=t.env,this.__KEY__=t.key||"G_CONFIG"}apply(t){t.hooks.run.tapPromise("DefineConfigPlugin",async t=>{await this.init(t)})}async init(t){const{__KEY__:n}=this,e=await this.readConfigFile();this.handleGenerateFiles(e),new f({[n]:JSON.stringify(e)}).apply(t)}handleGenerateFiles(t){const n=[{name:__dirname+"/config.ts",template:"export default {{json}}".replace(/\{\{json\}\}/g,JSON.stringify(t,null,2))},{name:__dirname+"/global.d.ts",template:"import config from './config'\ndeclare global {\n  const G_CONFIG: typeof config\n}\nexport {}"}];for(const{name:t,template:e}of n)l(t,e)}async readConfigFile(){const{__PATH__:t,__ENV__:n}=this,e={default:{regExp:"config.?(default).?(ts|js)",value:{}},[n]:{regExp:`config.?(${n}).?(ts|js)`,value:{}}};for(const n in e){const[r]=c(e[n].regExp,t);if(r){const t=await import(r)||{default:{}};e[n].value=t.default}}return Object.assign({},e.default.value,e[n].value)}};

/*!
 * @crofys/define-config-plugin v1.0.0
 * (c) 2020-2020 Russell
 * https://github.com/any86/any-touch
 * Released under the MIT License.
 */
"use strict";function t(t){return t&&"object"==typeof t&&"default"in t?t.default:t}function e(t){if(t&&t.__esModule)return t;var e={};return t&&Object.keys(t).forEach((function(n){var r=Object.getOwnPropertyDescriptor(t,n);Object.defineProperty(e,n,r.get?r:{enumerable:!0,get:function(){return t[n]}})})),e.default=t,e}var n=t(require("webpack")),r=t(require("fs"));function i(t){var e=function(t){return"/"===t.charAt(0)}(t),n="/"===a(t,-1);return(t=function(t,e){for(var n=0,r=t.length-1;r>=0;r--){var i=t[r];"."===i?t.splice(r,1):".."===i?(t.splice(r,1),n++):n&&(t.splice(r,1),n--)}if(e)for(;n--;n)t.unshift("..");return t}(s(t.split("/"),(function(t){return!!t})),!e).join("/"))||e||(t="."),t&&n&&(t+="/"),(e?"/":"")+t}function o(){var t=Array.prototype.slice.call(arguments,0);return i(s(t,(function(t,e){if("string"!=typeof t)throw new TypeError("Arguments to path.join must be strings");return t})).join("/"))}function s(t,e){if(t.filter)return t.filter(e);for(var n=[],r=0;r<t.length;r++)e(t[r],r,t)&&n.push(t[r]);return n}var a="b"==="ab".substr(-1)?function(t,e,n){return t.substr(e,n)}:function(t,e,n){return e<0&&(e=t.length+e),t.substr(e,n)};const c=(u="RegExp",t=>t&&Object.prototype.toString.call(t)===`[object ${u}]`);var u;const f=(t,e)=>{try{const n=c(t)?t:new RegExp(t);return r.readdirSync(e).filter(t=>n.test(t)).map(t=>o(e,t))}catch(t){console.log("读取文件失败:",e)}return[]},l=(t,e,n)=>{try{r.writeFileSync(t,e,n)}catch(e){console.log("读取文件失败:",t)}},p=n.DefinePlugin;module.exports=class{constructor(t){this.__PATH__=t.path||o(process.cwd(),"./config/"),this.__ENV__=t.env,this.__KEY__=t.key||"G_CONFIG"}apply(t){t.hooks.run.tapPromise("DefineConfigPlugin",async t=>{await this.init(t)})}async init(t){const{__KEY__:e}=this,n=await this.readConfigFile();this.handleGenerateFiles(n),new p({[e]:JSON.stringify(n)}).apply(t)}handleGenerateFiles(t){const e=[{name:__dirname+"/config.ts",template:"export default {{json}}".replace(/\{\{json\}\}/g,JSON.stringify(t,null,2))},{name:__dirname+"/global.d.ts",template:"import config from './config'\ndeclare global {\n  const G_CONFIG: typeof config\n}\nexport {}"}];for(const{name:t,template:n}of e)l(t,n)}async readConfigFile(){const{__PATH__:t,__ENV__:n}=this,r={default:{regExp:"config.?(default).?(ts|js)",value:{}},[n]:{regExp:`config.?(${n}).?(ts|js)`,value:{}}};for(const n in r){const[i]=f(r[n].regExp,t);if(i){const t=await new Promise((function(t){t(e(require(i)))}))||{default:{}};r[n].value=t.default}}return Object.assign({},r.default.value,r[n].value)}};
